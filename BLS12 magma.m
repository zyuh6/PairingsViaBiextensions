function double(b4, P)
   X := P[1];
   Z := P[2];
   a := X^2;
   X3 := a*X;
   b := Z^2;
   Z3 := b*Z;
   c := X3 - 2*b4*Z3;
   d := 4*X3 + b4*Z3;
   X2 := X*c;
   Z2 := Z*d;
   return X2, Z2;
end function;

function diff_add(b4, P, Q, ixPmQ)
    XP := P[1];
    ZP := P[2];
    XQ := Q[1]; 
    ZQ := Q[2];
    a := XP+ZP;
    b := XP-ZP;
    c := XQ+ZQ;
    XPXQ := XP*XQ;
    ZPZQ := ZP*ZQ;
    d := a*c - XPXQ - ZPZQ;
    e := b*c - XPXQ + ZPZQ;
    XPQ := (-b4*ZPZQ*d + XPXQ^2) * ixPmQ;
    ZPQ := e^2;
    return XPQ, ZPQ;
end function;
//cubical ladder
function ladder3(n, b4, P, Q, PQ, ixP, ixQ, ixPQ)
    XnQ := Q[1];
    ZnQ := Q[2];
    XnQQ, ZnQQ := double(b4, Q);
    XPnQQ, ZPnQQ := diff_add(b4, PQ, Q, ixP);
    if n eq 2 then
        return XnQQ, ZnQQ, XPnQQ, ZPnQQ;
    end if;
    nbits := Reverse(Intseq(n - 1, 2));
    for bit := 2 to #nbits do
        XR, ZR := diff_add(b4, [XnQQ, ZnQQ], [XnQ, ZnQ], ixQ);
        if nbits[bit] eq 0 then
            XPnQQ, ZPnQQ := diff_add(b4, [XPnQQ, ZPnQQ], [XnQ, ZnQ], ixPQ);
            XnQ, ZnQ := double(b4, [XnQ, ZnQ]);
            XnQQ := XR;
            ZnQQ := ZR;
        else
            XPnQQ, ZPnQQ := diff_add(b4, [XPnQQ, ZPnQQ], [XnQQ, ZnQQ], ixP);
            XnQQ, ZnQQ := double(b4, [XnQQ, ZnQQ]);
            XnQ := XR;
            ZnQ := ZR;
        end if;
    end for;
    return XnQQ, ZnQQ, XPnQQ, ZPnQQ;
end function;

function biext_ladder(n, b4, xP, xQ, xPQ)
    xPxQ := xP*xQ;
    xPxQxPQ := xPxQ*xPQ;
    ixPxQxPQ := 1/xPxQxPQ;
    ixPQ := xPxQ * ixPxQxPQ;
    ixPxQ := xPQ * ixPxQxPQ;
    ixP := xQ * ixPxQ;
    ixQ := xP * ixPxQ;
    P := [xP, 1];
    Q := [xQ, 1];
    PQ := [xPQ, 1];
    XnQ, ZnQ, XPnQ, ZPnQ := ladder3(n, b4, P, Q, PQ, ixP, ixQ, ixPQ);
    return  XnQ, ZnQ, XPnQ, ZPnQ;
end function;

p := 258664426012969094010652733694893533536393512754914660539884262666720468348340822774968888139573360124440321458177; 
r := 8444461749428370424248824938781546531375899335154063827935233455917409239041;
t := 9586122913090633730;
lamb := t - 1;
Fp :=GF(p);
Fp2<u>:=ExtensionField<Fp,u|u^2 + 5>;
Fp6<v>:=ExtensionField<Fp2,v|v^3 - u>;
Fp12<w>:=ExtensionField<Fp6,w|w^2 - v>;
E:= EllipticCurve([Fp|0,1]);
E12:= EllipticCurve([Fp12|0,1]);
Etwist := EllipticCurve([Fp2|0,1/u]);
Etwist12 := EllipticCurve([Fp12|0,1/u]);
//final exponentiation
e := 10623521018019860488254031663707568428798032905123811199571213965079129114663661236359849629341526275899063345613340067081670062620727617884137487754739150147491204559514205186492385590272208934467461444944652711005169371168250068790820776124772095630237102189827733019989835063334551453893534663070786533932633573962932272563471643288531959637300817070265537429506484880990981069041269405383502889677357082012807298529931118124428569059822346289745077401570134157444973271520981774047146918354408632568723153146248333028827919406785654402107153546667815607201488590832478225403444136409349877481268154817904541340614173261949772403060924324366861723245182619859389254985008236007465814273361497134138868945580557938161335670207544906643574043606819537336472235809927599628123275314288006170804044560238676463931639339711913111080974582593228138704154320599775683095604041309000197025419968125718018311805959315220036948621879242495199408833915486421612374480018459896018440926235261824654956932384859260479372776022979736734221629097297890154692194441528462770218811795624471108972377573690833913231260547835550851256817740247389770320334698430697237343583761719223414894063451411431859122738488311580005412765070251810159991897110936324943232526870280724876946523218213525646968094720;


b12px:=Fp12!(0x8848DEFE740A67C8FC6225BF87FF5485951E2CAA9D41BB188282C8BD37CB5CD5481512FFCD394EEAB9B16EB21BE9EF);
b12py:=Fp12!(0x1914A69C5102EFF1F674F5D30AFEEC4BD7FB348CA3E52D96D182AD44FB82305C2FE3D3634A9591AFD82DE55559C8EA6);
b12qx:=Fp2!(0x18480BE71C785FEC89630A2A3841D01C565F071203E50317EA501F557DB6B9B71889F52BB53540274E3E48F7C005196 + u*0xEA6040E700403170DC5A51B1B140D5532777EE6651CECBE7223ECE0799C9DE5CF89984BFF76FE6B26BFEFA6EA16AFE);
b12qy:=Fp2!(0x690D665D446F7BD960736BCBB2EFB4DE03ED7274B49A58E458C282F832D204F2CF88886D8C7C2EF094094409FD4DDF + u*0xF8169FD28355189E549DA3151A70AA61EF11AC3D591BF12463B01ACEE304C24279B83F5E52270BD9A1CDD185EB8F93);
P := E12![b12px,b12py];
Q := E12![b12qx*v,b12qy*v*w];

Q := Etwist12![Q[1]/v,Q[2]/(v*w)];
xQ := Q[1];
P := Etwist12![P[1]/v, P[2]/(v*w)];
xP := P[1];
xPQ := (P + Q)[1];
xP1 := P1[1];
xQ1 := Q1[1];
xPQ1 := (P1 + Q1)[1];
b4 := Fp12!(4/u);

function pbls12(Q, P)
    m:=8444461749428370423367920132324624489117748830232680209278137536208992993281;
    xP := P[1];
    xQ := Q[1];
    xPQ := (P + Q)[1];
    XmQ, ZmQ, XPmQ, ZPmQ := biext_ladder(m, b4, xP, xQ, xPQ);
    return ((XmQ^p*(xPQ))/(XPmQ^p*(xQ)))^e;
end function;


if pbls12(Q*23,P) eq pbls12(Q,P)^23 and pbls12(Q,P*23) eq pbls12(Q,P)^23 then
    printf "bilinear\n";
else
    printf "non-bilinear\n";
end if;
if pbls12(Q, P) eq 1 then
    printf "degenerate\n";
else
    printf "non-degenerate\n";
end if;


